# -*- coding: utf-8 -*-
"""Stock price analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JLqNHG9vjxRmnY5Yljy9jb11lnbqckxT
"""

!pip install yfinance seaborn

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from matplotlib.patches import Rectangle
import yfinance as yf
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

plt.style.use('seaborn-v0_8')
plt.rcParams['figure.figsize'] = (15, 10)

class StockDataCollector:
    def __init__(self, symbol, period='2y'):
        self.symbol = symbol
        self.period = period
        self.data = None
        self.fetch_data()

    def fetch_data(self):
        try:
            ticker = yf.Ticker(self.symbol)
            self.data = ticker.history(period=self.period)
            print(f"Successfully fetched {len(self.data)} days of data for {self.symbol}")
        except Exception as e:
            print(f"Error fetching data: {e}")
            return None

    def get_data(self):
        return self.data

def calculate_moving_averages(data, windows=[50, 200]):
    for window in windows:
        data[f'MA_{window}'] = data['Close'].rolling(window=window).mean()
    return data

def calculate_volatility(data, window=30):
    data['Returns'] = data['Close'].pct_change()
    data['Volatility'] = data['Returns'].rolling(window=window).std() * np.sqrt(252)
    return data

def calculate_price_stats(data):
    current_price = data['Close'].iloc[-1]
    max_price = data['Close'].max()
    min_price = data['Close'].min()
    avg_volume = data['Volume'].mean()
    total_return = (current_price - data['Close'].iloc[0]) / data['Close'].iloc[0] * 100

    return {
        'current_price': current_price,
        'max_price': max_price,
        'min_price': min_price,
        'avg_volume': avg_volume,
        'total_return': total_return
    }

def plot_price_trends(data, symbol):
    data = calculate_moving_averages(data.copy())

    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 12),
                                  gridspec_kw={'height_ratios': [3, 1]})

    ax1.plot(data.index, data['Close'],
            label=f'{symbol} Close Price', linewidth=1.5, color='#2E86AB')
    ax1.plot(data.index, data['MA_50'],
            label='50-Day MA', linewidth=2, color='#A23B72', alpha=0.8)
    ax1.plot(data.index, data['MA_200'],
            label='200-Day MA', linewidth=2, color='#F18F01', alpha=0.8)

    ax1.set_title(f'{symbol} Stock Price Analysis', fontsize=16, fontweight='bold')
    ax1.set_ylabel('Price ($)', fontsize=12)
    ax1.legend(loc='upper left')
    ax1.grid(True, alpha=0.3)

    ax2.bar(data.index, data['Volume'],
           color='#C5283D', alpha=0.6, width=1)
    ax2.set_ylabel('Volume', fontsize=12)
    ax2.set_xlabel('Date', fontsize=12)
    ax2.grid(True, alpha=0.3)

    for ax in [ax1, ax2]:
        ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))
        ax.xaxis.set_major_locator(mdates.MonthLocator(interval=3))
        plt.setp(ax.xaxis.get_majorticklabels(), rotation=45)

    plt.tight_layout()
    plt.show()

def plot_candlestick_chart(data, symbol, days=100):
    recent_data = data.tail(days).copy()

    fig, ax = plt.subplots(figsize=(15, 8))

    for i, (date, row) in enumerate(recent_data.iterrows()):
        open_price = row['Open']
        high_price = row['High']
        low_price = row['Low']
        close_price = row['Close']

        color = '#2E8B57' if close_price >= open_price else '#DC143C'

        ax.plot([i, i], [low_price, high_price], color='black', linewidth=1)

        height = abs(close_price - open_price)
        bottom = min(open_price, close_price)
        rect = Rectangle((i-0.3, bottom), 0.6, height,
                       facecolor=color, edgecolor='black', alpha=0.8)
        ax.add_patch(rect)

    ax.set_title(f'{symbol} Candlestick Chart (Last {days} Days)',
                fontsize=16, fontweight='bold')
    ax.set_ylabel('Price ($)', fontsize=12)
    ax.set_xlabel('Trading Days', fontsize=12)
    ax.grid(True, alpha=0.3)

    step = max(1, len(recent_data) // 10)
    ax.set_xticks(range(0, len(recent_data), step))
    ax.set_xticklabels([recent_data.index[i].strftime('%Y-%m-%d')
                       for i in range(0, len(recent_data), step)],
                      rotation=45)

    plt.tight_layout()
    plt.show()

def plot_volatility_analysis(data, symbol):
    data = calculate_volatility(data.copy())

    fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(15, 12))

    ax1.plot(data.index, data['Close'], color='#2E86AB', linewidth=1.5)
    ax1.set_title(f'{symbol} Price Movement', fontsize=14, fontweight='bold')
    ax1.set_ylabel('Price ($)')
    ax1.grid(True, alpha=0.3)

    ax2.plot(data.index, data['Returns'] * 100,
            color='#A23B72', linewidth=1, alpha=0.7)
    ax2.axhline(y=0, color='black', linestyle='-', alpha=0.3)
    ax2.set_title('Daily Returns (%)', fontsize=14, fontweight='bold')
    ax2.set_ylabel('Returns (%)')
    ax2.grid(True, alpha=0.3)

    ax3.plot(data.index, data['Volatility'] * 100,
            color='#F18F01', linewidth=2)
    ax3.set_title('30-Day Rolling Volatility (%)', fontsize=14, fontweight='bold')
    ax3.set_ylabel('Volatility (%)')
    ax3.set_xlabel('Date')
    ax3.grid(True, alpha=0.3)

    for ax in [ax1, ax2, ax3]:
        ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))
        ax.xaxis.set_major_locator(mdates.MonthLocator(interval=3))
        plt.setp(ax.xaxis.get_majorticklabels(), rotation=45)

    plt.tight_layout()
    plt.show()

def plot_seasonal_analysis(data, symbol):
    df_copy = data.copy()
    df_copy['Month'] = df_copy.index.month
    df_copy['Year'] = df_copy.index.year
    df_copy['DayOfWeek'] = df_copy.index.dayofweek
    df_copy['Returns'] = df_copy['Close'].pct_change()

    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 10))

    monthly_returns = df_copy.groupby('Month')['Returns'].mean() * 100
    months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
             'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']

    ax1.bar(range(1, 13), monthly_returns.values,
           color='#2E86AB', alpha=0.7)
    ax1.set_title('Average Monthly Returns', fontsize=14, fontweight='bold')
    ax1.set_xlabel('Month')
    ax1.set_ylabel('Average Return (%)')
    ax1.set_xticks(range(1, 13))
    ax1.set_xticklabels(months)
    ax1.grid(True, alpha=0.3)
    ax1.axhline(y=0, color='black', linestyle='-', alpha=0.3)

    day_returns = df_copy.groupby('DayOfWeek')['Returns'].mean() * 100
    days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri']

    ax2.bar(range(5), day_returns.values,
           color='#A23B72', alpha=0.7)
    ax2.set_title('Average Daily Returns by Day of Week', fontsize=14, fontweight='bold')
    ax2.set_xlabel('Day of Week')
    ax2.set_ylabel('Average Return (%)')
    ax2.set_xticks(range(5))
    ax2.set_xticklabels(days)
    ax2.grid(True, alpha=0.3)
    ax2.axhline(y=0, color='black', linestyle='-', alpha=0.3)

    yearly_returns = df_copy.groupby('Year')['Returns'].sum() * 100
    ax3.bar(yearly_returns.index, yearly_returns.values,
           color='#F18F01', alpha=0.7)
    ax3.set_title('Annual Returns', fontsize=14, fontweight='bold')
    ax3.set_xlabel('Year')
    ax3.set_ylabel('Annual Return (%)')
    ax3.grid(True, alpha=0.3)
    ax3.axhline(y=0, color='black', linestyle='-', alpha=0.3)

    ax4.hist(df_copy['Close'], bins=50, color='#C5283D', alpha=0.7, edgecolor='black')
    ax4.set_title('Price Distribution', fontsize=14, fontweight='bold')
    ax4.set_xlabel('Price ($)')
    ax4.set_ylabel('Frequency')
    ax4.grid(True, alpha=0.3)

    plt.tight_layout()
    plt.show()

def generate_summary_report(data, symbol):
    stats = calculate_price_stats(data)
    data_with_ma = calculate_moving_averages(data.copy())

    print(f"\n{'='*50}")
    print(f"STOCK ANALYSIS REPORT: {symbol}")
    print(f"{'='*50}")
    print(f"Analysis Period: {data.index[0].strftime('%Y-%m-%d')} to {data.index[-1].strftime('%Y-%m-%d')}")
    print(f"Current Price: ${stats['current_price']:.2f}")
    print(f"52-Week High: ${stats['max_price']:.2f}")
    print(f"52-Week Low: ${stats['min_price']:.2f}")
    print(f"Total Return: {stats['total_return']:.2f}%")
    print(f"Average Daily Volume: {stats['avg_volume']:,.0f}")

    ma_50 = data_with_ma['MA_50'].iloc[-1]
    ma_200 = data_with_ma['MA_200'].iloc[-1]
    print(f"50-Day MA: ${ma_50:.2f}")
    print(f"200-Day MA: ${ma_200:.2f}")

    if ma_50 > ma_200:
        print("Technical Signal: BULLISH (50-MA > 200-MA)")
    else:
        print("Technical Signal: BEARISH (50-MA < 200-MA)")

    print(f"{'='*50}")

def plot_comparison_chart(symbols, period='1y'):
    fig, ax = plt.subplots(figsize=(15, 8))

    for symbol in symbols:
        collector = StockDataCollector(symbol, period=period)
        data = collector.get_data()
        normalized_prices = (data['Close'] / data['Close'].iloc[0] - 1) * 100
        ax.plot(data.index, normalized_prices,
               label=symbol, linewidth=2, alpha=0.8)

    ax.set_title('Stock Performance Comparison', fontsize=16, fontweight='bold')
    ax.set_ylabel('Percentage Change (%)', fontsize=12)
    ax.set_xlabel('Date', fontsize=12)
    ax.legend()
    ax.grid(True, alpha=0.3)
    ax.axhline(y=0, color='black', linestyle='-', alpha=0.5)

    ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))
    ax.xaxis.set_major_locator(mdates.MonthLocator(interval=2))
    plt.setp(ax.xaxis.get_majorticklabels(), rotation=45)

    plt.tight_layout()
    plt.show()

def analyze_stock(symbol, period='2y', include_candlestick=True, candlestick_days=60):
    collector = StockDataCollector(symbol, period=period)
    data = collector.get_data()

    if data is None or data.empty:
        print(f"No data available for {symbol}")
        return

    print(f"\nAnalyzing {symbol}...")

    plot_price_trends(data, symbol)

    if include_candlestick:
        plot_candlestick_chart(data, symbol, candlestick_days)

    plot_volatility_analysis(data, symbol)
    plot_seasonal_analysis(data, symbol)
    generate_summary_report(data, symbol)

symbol = 'AAPL'
analyze_stock(symbol, period='2y')

symbols = ['AAPL', 'GOOGL', 'MSFT', 'TSLA']
plot_comparison_chart(symbols, period='1y')